<?php

/**
 * Implements hook_schema()
 */
function accounts_schema()
{
   $schema['accounts'] = array(
      'description' => t('The base table for account information'),
      'fields' => array(
         'id' => array(
            'description' => 'The primary identifier for an account',
            'type' => 'serial',
            'unsigned' => TRUE,
            'not null' => TRUE
         ),
         'uid' => array(
            'description' => 'ID for the user that entered this account',
            'type' => 'int',
            'unsigned' => TRUE,
            'not null' => TRUE
         ),
         'name' => array(
            'description' => 'Name for the account',
            'type' => 'varchar',
            'length' => 100,
            'not null' => TRUE,
         ),
         'balance' => array(
            'description' => 'Amount for the account',
            'type' => 'float',
            'not null' => TRUE,
         ),
      ),
      'primary key' => array('id'),
   );

   return $schema;
}

/**
 * Implements hook_help()
 *
 * Displays help and module information
 *
 * @param path
 *    Which path of the site we're using to display help
 * @param arg
 *    Array that holds the current path as returned from arg() function
 */
function accounts_help($path, $arg)
{
   switch ($path) 
   {
   case "admin/help#account":
      return '<p>' . t("Allows a user to enter account information") . '<\p>';
      break;
   }
}

/**
 * Implements hook_block_info()
 */
function accounts_block_info()
{
   $blocks['accounts'] = array(
      // The name that will appear in the block list
      'info' => t('Accounts'),
   );
   return $blocks;
}


/**
 * Custom content function
 */
function accounts_contents()
{
   // Select the transactions from the transactions table
   $query = db_select('accounts', 't')
      ->fields('t', array('id', 'uid', 'name', 'balance'))
      ->orderby('name')
      ->execute();

   return $query;
}

/**
 * Implements hook_block_view()
 *
 * Prepares the contents of the block
 */
function accounts_block_view($delta = '')
{
   switch($delta)
   {
   case 'accounts':
      $block['subject'] = t('');
      if(user_access('access content'))
      {
         $addAccountForm = drupal_get_form('accounts_add_form');
         $manageAccountForm = drupal_get_form('accounts_manage_form');
         $block['content'] = drupal_render($addAccountForm);
         $block['content'] .= drupal_render($manageAccountForm);
      }

      return $block;
   }
}

/**
 * Creates the form to add an account
 */
function accounts_add_form()
{
   $form = array();

      // Create the addAcount form
   $form['addAccount'] = array(
      '#type' => 'fieldset',
      '#title' => t('Add a new account'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
   );

   $form['addAccount']['name'] = array(
      '#type' => 'textfield',
      '#title' => t('Account Name'),
      '#size' => 40,
      '#maxLength' => 40,
   );

   $form['addAccount']['balance'] = array(
      '#type' => 'textfield',
      '#title' => t('Balance'),
      '#size' => 40,
      '#maxLength' => 40,
   );

   $form['addAccount']['submit'] = array(
      '#type' => 'submit',
      '#value' => 'Add Account',
      '#validate' => array('add_account_validate'),
      '#submit' => array('add_account_submit'),
   );

   return $form;
}

function add_account_validate($form, &$form_state)
{
   $balance = str_replace('$', '', $form_state['values']['balance']);
   $name = $form_state['values']['name'];

   if(!$balance)
   {
      form_set_error('balance', 'Please enter the balance for the account');
   }

   if(!$name)
   {
      form_set_error('name', 'Please set a name for the account');
   }

   // Validate the balance is formatted properly
   if(preg_match('/^[+-]?[0-9]{1,3}(?:,?[0-9]{3})*(?:\.[0-9]{2})?$/', $balance) != 1)
   {
      form_set_error('balance', 'Please enter a valid balance for the account');
   }
}

function add_account_submit($form, &$form_state)
{
   global $user;
   $balance = str_replace('$', '', $form_state['values']['balance']);
   $balance = preg_replace("/([^0-9\\.-])/i", "", $balance);
   $name = $form_state['values']['name'];

   if(db_insert('accounts')
      ->fields(array(
         'uid' => $user->uid,
         'name' => $name,
         'balance' => $balance,
      ))
      ->execute())
   {
      setlocale(LC_MONETARY, 'en_US.UTF-8');
      $debug_message = "Successfully added account " . $name . " with a balance of " . money_format('%.2n', $balance);
      drupal_set_message($debug_message, 'status');
   }
}

/**
 * Manage Form
 **/
function accounts_manage_form()
{
   $form = array();

   $result = accounts_contents();
   $categories = array();

   // Iterate over the accounts and format as strings
   setlocale(LC_MONETARY, 'en_US.UTF-8');
   foreach ($result as $account)
   {
      $categories[$account->id] = array(
         'name' => $account->name,
         'balance' => money_format('%.2n', $account->balance),
      );
   }

   if (!empty($categories))
   {
      $form['accounts'] = array(
         '#type' => 'fieldset',
         '#title' => t("Manage Accounts"),
         '#collapsible' => TRUE,
         '#collapsed' => FALSE,
      );

      $header = array(
         'name' => t('Account Name'),
         'balance' => t('Account Balance'),
      );

      $form['accounts']['categories'] = array(
         '#type' => 'tableselect',
         '#header' => $header,
         '#options' => $categories,
         '#multiple' => TRUE,
      );

      $form['accounts']['remove'] = array(
         '#type' => 'submit',
         '#value' => 'Delete Selected',
         '#submit' => array('remove_account_submit'),
      );
   }

   return $form;
}

function remove_account_submit($form, &$form_state)
{
   $debug_message = t('');
   $selectedIDs = array_filter($form_state['values']['categories']);

   foreach($selectedIDs as $key => $value)
   {
      if($value)
      {
         // Get the account name from the database with this ID
         $name = db_select('accounts', 'a')
            ->fields('a', array('name'))
            ->condition('id', $key)
            ->execute()
            ->fetchField();

         $num_deleted = db_delete('accounts')
            ->condition('id', $key)
            ->execute();

         if($num_deleted > 0)
         {
            $debug_message .= "Successfully removed " . $name . "<br/>";
         }
      }
   }

   if(!empty($debug_message))
   {
      drupal_set_message($debug_message, 'status');
   }

}
