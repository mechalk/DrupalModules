<?php

/**
 * Implements hook_schema()
 */
function transactions_schema()
{
   $schema['transactions'] = array(
      'description' => t('The base table for transactions'),
      'fields' => array(
         'id' => array(
            'description' => 'The primary identifier for a transaction',
            'type' => 'serial',
            'unsigned' => TRUE,
            'not null' => TRUE
         ),
         'uid' => array(
            'description' => 'ID for the user that entered this transaction',
            'type' => 'int',
            'unsigned' => TRUE,
            'not null' => TRUE
         ),
         'payee' => array(
            'description' => 'Receiver of the transaction',
            'type' => 'varchar',
            'length' => 100,
            'not null' => TRUE,
         ),
         'timestamp' => array(
            'description' => 'Timestamp for the transaction in seconds',
            'type' => 'int',
            'not null' => TRUE,
         ),
         'amount' => array(
            'description' => 'Value of the transaction',
            'type' => 'float',
            'not null' => TRUE,
         ),
         'category' => array(
            'description' => 'Budget category for the transaction',
            'type' => 'varchar',
            'length' => 100,
            'not null' => TRUE,
         ),
      ),
      'primary key' => array('id'),
   );

   return $schema;
}

/**
 * Implements hook_help()
 *
 * Displays help and module information
 *
 * @param path
 *    Which path of the site we're using to display help
 * @param arg
 *    Array that holds the current path as returned from arg() function
 */
function transactions_help($path, $arg)
{
   switch ($path) 
   {
   case "admin/help#transactions":
      return '<p>' . t("Allows a user to enter transactions for the budget") . '<\p>';
      break;
   }
}

/**
 * Implements hook_block_info()
 */
function transactions_block_info()
{
   $blocks['transactions'] = array(
      // The name that will appear in the block list
      'info' => t('Transactions'),
   );
   return $blocks;
}


/**
 * Custom content function
 * Retrieve the transactions spanning the date range provided
 */
function transaction_contents($startTime, $endTime, $sort)
{
   //if(!$sort)
   {
      // Select the transactions from the transactions table
      $query = db_select('transactions', 't')
         ->fields('t', array('id', 'uid', 'payee', 'timestamp', 'amount', 'category'))
         ->condition('timestamp', array($startTime, $endTime), 'BETWEEN')
         ->orderby('timestamp', 'DESC')
         ->execute();
   }
/*
   else
   {
      // Select the transactions from the transactions table
      $query = db_select('transactions', 't')
         ->fields('t', array('id', 'uid', 'payee', 'timestamp', 'amount', 'category'))
         ->condition('timestamp', array($startTime, $endTime), 'BETWEEN');

      $query = $query
         ->extend('TableSort')
         ->orderByHeader($sort);

      $query = $query->execute();
   }
 */

   return $query;
}

/**
 * Implements hook_block_view()
 *
 * Prepares the contents of the block
 */
function transactions_block_view($delta = '')
{
   switch($delta)
   {
   case 'transactions':
      $block['subject'] = t('');
      if(user_access('access content'))
      {
         $addTransactionForm = drupal_get_form('transactions_add_form');
         $block['content'] = drupal_render($addTransactionForm);

         $numResults = db_select('transactions', 't')
            ->fields('t', array('id'))
            ->countQuery()
            ->execute()
            ->fetchField();

         if($numResults > 0)
         {
            $filterForm = drupal_get_form('transactions_filter_form');
            $viewTransactionsForm = drupal_get_form('transactions_view_form');
            $block['content'] .= drupal_render($filterForm);
            $block['content'] .= drupal_render($viewTransactionsForm);
         }
      }

      return $block;
   }
}

/**
 * Returns the category select array to add in forms
 */
function getCategorySelect($defaultCategory)
{
   $categorySelect = array();

   // Get the budget contents from the database
   $result = budget_contents();

   // Array to contain the list of categories returned from the database
   $categories = array();

   foreach($result as $budget)
   {
      $categories[$budget->id] = $budget->category;
   }

   if(count($categories))
   {
      if(empty($defaultCategory))
      {
         $categorySelect = array(
            '#type' => 'select',
            '#title' => t('Category'),
            '#options' => $categories,
         );
      }
      else
      {
         // TODO: default_value does not work as called from transactions_view_form
         $categorySelect = array(
            '#type' => 'select',
            '#title' => t('Category'),
            '#options' => $categories,
            '#default_value' => $defaultCategory
         );
      }
   }

   return $categorySelect;
}

/**
 * Creates the form to add a transaction
 */
function transactions_add_form()
{
   $form = array();

   $categorySelect = getCategorySelect(array());

   if(!empty($categorySelect))
   {
      // Create the addTransaction form
      $form['addTransaction'] = array(
         '#type' => 'fieldset',
         '#title' => t('Add a new transaction'),
         '#collapsible' => TRUE,
         '#collapsed' => FALSE,
      );

      $form['addTransaction']['payee'] = array(
         '#type' => 'textfield',
         '#title' => t('Payee'),
         '#size' => 40,
         '#maxLength' => 40,
      );

      $form['addTransaction']['amount'] = array(
         '#type' => 'textfield',
         '#title' => t('Amount'),
         '#size' => 40,
         '#maxLength' => 40,
      );

      $form['addTransaction']['date'] = array(
         '#type' => 'date',
         '#title' => t('Date'),
      );

      $form['addTransaction']['categorySelect'] = $categorySelect;

      $form['addTransaction']['submit'] = array(
         '#type' => 'submit',
         '#value' => 'Add Transaction',
         '#validate' => array('add_transaction_validate'),
         '#submit' => array('add_transaction_submit'),
      );
   }
   else
   {
      drupal_set_message(t('Add at least one budget category in order to add a transaction'), 'error');
   }

   return $form;
}

function add_transaction_validate($form, &$form_state)
{
   $payee = $form_state['values']['payee'];
   $amount = str_replace('$', '', $form_state['values']['amount']);
   $year = $form_state['values']['date']['year'];
   $month = $form_state['values']['date']['month'];
   $day = $form_state['values']['date']['day'];
   $categoryId = $form_state['values']['categorySelect'];

   if(!$payee)
   {
      form_set_error('payee', 'Please enter a payee name for the transaction');
   }

   if(!$amount)
   {
      form_set_error('amount', 'Please enter the amount for the transaction');
   }

   if(!$year || !$month || !$day)
   {
      form_set_error('date', 'Please enter a valid date for the transaction');
   }

   if(!$categoryId)
   {
      form_set_error('categorySelect', 'Please select a category for the transaction');
   }

   // Validate that the date selected is not in the future
   $currentYear = intval(date("Y"));
   $currentMonth = intval(date("m"));
   $currentDay = intval(date("d"));
   if($currentYear < $year)
   {
      form_set_error('date][year', 'Date cannot be in the future');
   }
   else if($currentYear == $year)
   {
      if($currentMonth < $month)
      {
         form_set_error('date][month', 'Date cannot be in the future');
      }
      else if($currentMonth == $month)
      {
         if($currentDay < $day)
         {
            form_set_error('date][day', 'Date cannot be in the future');
         }
      }
   }

   // Validate the amount is formatted properly
   if(preg_match('/^[+-]?[0-9]{1,3}(?:,?[0-9]{3})*(?:\.[0-9]{2})?$/', $amount) != 1)
   {
      form_set_error('amount', 'Please enter a valid transaction amount');
   }

   // Validate that the category id is in the database
   if($categoryId)
   {
      $result = db_select('budget', 'b')
         ->fields('b')
         ->condition('id', $categoryId)
         ->execute()
         ->fetchField();

      if(empty($result))
      {
         form_set_error('categorySelect', t("Select a valid category"));
      }
   }
}

function add_transaction_submit($form, &$form_state)
{
   global $user;
   $payee = $form_state['values']['payee'];
   $amount = str_replace('$', '', $form_state['values']['amount']);
   $amount = preg_replace("/([^0-9\\.])/i", "", $amount);
   $year = $form_state['values']['date']['year'];
   $month = $form_state['values']['date']['month'];
   $day = $form_state['values']['date']['day'];
   $timeString = $month . "/" . $day . "/" . $year;
   $timestamp = strtotime($timeString);

   $categoryId = $form_state['values']['categorySelect'];

   if(db_insert('transactions')
      ->fields(array(
         'uid' => $user->uid,
         'payee' => $payee,
         'timestamp' => $timestamp,
         'amount' => $amount,
         'category' => $categoryId
      ))
      ->execute())
   {
      setlocale(LC_MONETARY, 'en_US.UTF-8');
      $debug_message = "Successfully added transaction: " . $payee . " for " . money_format('%.2n', $amount) . " on " . $month . "/" . $day . "/" . $year . "  seconds " . $timestamp;
      drupal_set_message($debug_message, 'status');
   }
}


/**
 * Function to add the view transactions form
 */
function transactions_filter_form()
{
   $form = array();

   // Create the filter form
   $form['filter'] = array(
      '#type' => 'fieldset',
      '#title' => t('Filter Transactions'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
   );

   // Get the current time
   $endTime = time();
   if(isset($_SESSION['endTime']))
   {
      // Read the session variable into the current time
      $endTime = $_SESSION['endTime'];
   }
   else
   {
      // Save the endTime to the current time
      $_SESSION['endTime'] = $endTime;
   }

   $endDay = date("d", $endTime);
   $endMonth = date("n", $endTime);
   $endYear = date("Y", $endTime);
   $endDate = array(
      'year' => $endYear,
      'month' => $endMonth,
      'day' => $endDay,
   );

   // Get the default start time
   // First of the current year
   $startTime = strtotime(t("January 1 !year", array('!year' => $endYear)));
   if(isset($_SESSION['startTime']))
   {
      $startTime = $_SESSION['startTime'];
   }
   else
   {
      $_SESSION['startTime'] = $startTime;
   }

   $startDay = date("d", $startTime);
   $startMonth = date("n", $startTime);
   $startYear = date("Y", $startTime);
   $startDate = array(
      'year' => $startYear, 
      'month' => $startMonth, 
      'day' => $startDay
   );

   $form['filter']['startDate'] = array(
      '#type' => 'date',
      '#default_value' => $startDate,
      '#title' => t('Start Date'),
   );

   $form['filter']['endDate'] = array(
      '#type' => 'date',
      '#default_value' => $endDate,
      '#title' => t('End Date'),
   );

   $form['filter']['submit'] = array(
      '#type' => 'submit',
      '#value' => 'Filter',
      '#submit' => array('filter_submit'),
   );

   return $form;
}

function filter_submit($form, &$form_state)
{
   $startYear = $form_state['values']['startDate']['year'];
   $startMonth = $form_state['values']['startDate']['month'];
   $startDay = $form_state['values']['startDate']['day'];
   $startTimeString = $startMonth . "/" . $startDay . "/" . $startYear;
   $startTimestamp = strtotime($startTimeString);
   $_SESSION['startTime'] = $startTimestamp;

   $endYear = $form_state['values']['endDate']['year'];
   $endMonth = $form_state['values']['endDate']['month'];
   $endDay = $form_state['values']['endDate']['day'];
   $endTimeString = $endMonth . "/" . $endDay . "/" . $endYear;
   $endTimestamp = strtotime($endTimeString);
   $_SESSION['endTime'] = $endTimestamp;
}

/**
 * Function to add the view transactions form
 */
function transactions_view_form()
{
   // Get the end time from the session variable
   $endTime = time();
   if(isset($_SESSION['endTime']))
   {
      // Read the session variable into the current time
      $endTime = $_SESSION['endTime'];
   }
   else
   {
      // Save the endTime to the current time
      $_SESSION['endTime'] = $endTime;
   }

   // Get the start time from the session variable
   // Seconds in 30 Days = (60 sec) * (60 min) * (24 hours) * (30 days)
   $startTime = $endTime - 2592000;
   if(isset($_SESSION['startTime']))
   {
      $startTime = $_SESSION['startTime'];
   }
   else
   {
      $_SESSION['startTime'] = $startTime;
   }

   $header = array(
      array('data' => 'Payee', 'field' => 'payee', 'sort' => 'ASC'),
      array('data' => 'Amount', 'field' => 'amount', 'sort' => 'ASC'),
      array('data' => 'Date', 'field' => 'date', 'sort' => 'ASC'),
      array('data' => 'Category', 'field' => 'category', 'sort' => 'ASC'),
   );

   // Get the transactions from the database
   $result = transaction_contents($startTime, $endTime, $header);

   // Array to contain the list of transactions returned from the database
   $transactions = array();

   // TODO: REMOVE when getCategorySelect works here
   // Get the budget contents from the database
   $budgetContents = budget_contents();

   // Array to contain the list of categories returned from the database
   $categories = array();

   foreach($budgetContents as $budget)
   {
      $categories[$budget->id] = $budget->category;
   }
   // TODO: END REMOVE
   
   // Iterate over the result set and set the options for the tableselect
   setlocale(LC_MONETARY, 'en_US.UTF-8');
   foreach($result as $transaction)
   {
      $transactions[$transaction->id] = array(
         'payee' => $transaction->payee,
         'amount' => t("!amount", array('!amount' => money_format('%.2n', $transaction->amount))),
         'date' => date('m/d/Y', $transaction->timestamp),
         'category' => $categories[$transaction->category],
         /* TODO: Does not render properly. default_value is ignored
         'category' => array(
            'data' => getCategorySelect($transaction->category)
         )
          */
      );
   }

   $form = array();

   // Create the transactions table form
   if(!empty($transactions))
   {
      $form['transactions'] = array(
         '#type' => 'fieldset',
         '#title' => t('Transactions'),
         '#collapsible' => TRUE,
         '#collapsed' => empty($transactions)
      );

      $header = array(
         'payee' => t('Payee'),
         'amount' => t('Amount'),
         'date' => t('Date'),
         'category' => t('Category'),
      );

      $form['transactions']['items'] = array(
         '#type' => 'tableselect',
         '#header' => $header,
         '#options' => $transactions,
         '#multiple' => TRUE,
      );

      $form['transactions']['remove'] = array(
         '#type' => 'submit',
         '#value' => 'Delete Selected',
         '#submit' => array('remove_transaction_submit'),
      );
   }

   return $form;
}

function remove_transaction_submit($form, &$form_state)
{
   $debug_message = t('');
   $selectedIDs = array_filter($form_state['values']['items']);

   $num_deleted = 0;

   foreach($selectedIDs as $key => $value)
   {
      if($value)
      {
         $num_deleted += db_delete('transactions')
            ->condition('id', $key)
            ->execute();
      }
   }

   if($num_deleted > 0)
   {
      $debug_message .= "Successfully removed " . $num_deleted . " transactions<br/>";
      drupal_set_message($debug_message, 'status');
   }
}

