<?php

/**
 * Implements hook_schema()
 */
function budget_schema()
{
   $schema['budget'] = array(
      'description' => t('The base table for budget categories'),
      'fields' => array(
         'id' => array(
            'description' => 'The primary identifier for a budget category',
            'type' => 'serial',
            'unsigned' => TRUE,
            'not null' => TRUE
         ),
         'uid' => array(
            'description' => 'ID for the user that last modified this category',
            'type' => 'int',
            'unsigned' => TRUE,
            'not null' => TRUE
         ),
         'category' => array(
            'description' => 'The budget category',
            'type' => 'varchar',
            'length' => 100,
            'not null' => TRUE,
         ),
         'allocation' => array(
            'description' => 'The amount allocated to this category',
            'type' => 'float',
            'not null' => TRUE
         ),
      ),
      'primary key' => array('id'),
   );

   $schema['budgetIncome'] = array(
      'description' => t('The base table for income categories'),
      'fields' => array(
         'id' => array(
            'description' => 'The primary identifier for an income category',
            'type' => 'serial',
            'unsigned' => TRUE,
            'not null' => TRUE
         ),
         'uid' => array(
            'description' => 'ID for the user that last modified this category',
            'type' => 'int',
            'unsigned' => TRUE,
            'not null' => TRUE
         ),
         'category' => array(
            'description' => 'The income category',
            'type' => 'varchar',
            'length' => 100,
            'not null' => TRUE,
         ),
      ),
      'primary key' => array('id'),
   );

   return $schema;
}

/**
 * Implements hook_help()
 *
 * Displays help and module information
 *
 * @param path
 *    Which path of the site we're using to display help
 * @param arg
 *    Array that holds the current path as returned from arg() function
 */
function budget_help($path, $arg)
{
   switch ($path) 
   {
   case "admin/help#budget":
      return '<p>' . t("Displays the budget categories set by the user and allows the input of new categories") . '<\p>';
      break;
   }
}

/**
 * Implements hook_block_info()
 */
function budget_block_info()
{
   $blocks['budget'] = array(
      // The name that will appear in the block list
      'info' => t('Budget'),
   );
   return $blocks;
}

/**
 * Custom content function
 * 
 * Retrieve budget categories from the database
 *
 * @return
 *    A result set of the budget categories
 */
function budget_contents()
{
   // Select the categories from the budget table
   $query = db_select('budget', 'b')
      ->fields('b', array('id', 'uid', 'category', 'allocation'))
      ->orderby('category')
      ->execute();

   return $query;
}

function budget_income_contents()
{
   // Select the income categories from the budget table
   $query = db_select('budgetIncome', 'b')
      ->fields('b', array('id', 'uid', 'category'))
      ->orderby('category')
      ->execute();

   return $query;
}

/**
 * Implements hook_block_view()
 *
 * Prepares the contents of the block
 */
function budget_block_view($delta = '')
{
   switch ($delta)
   {
   case 'budget':
      $block['subject'] = t('');
      if (user_access('access content'))
      {
         $addBudgetForm = drupal_get_form('budget_add_form');
         $addIncomeForm = drupal_get_form('budget_income_add_form');
         $block['content'] = drupal_render($addBudgetForm);
         $block['content'] .= drupal_render($addIncomeForm);
      }

      return $block;
   }
}

/**
 * Creates the form to add a budget category
 */
function budget_add_form()
{
   global $user;

   // Use the custom function to retrieve data
   $result = budget_contents();

   // Array to contain the list of categories returned from the database
   $categories = array();

   // Iterate over the resultset and format as strings
   setlocale(LC_MONETARY, 'en_US.UTF-8');
   foreach ($result as $budget)
   {
      $categories[$budget->id] = array(
         'category' => $budget->category,
         'allocation' => array(
            'data' => array(
               '#type' => 'textfield',
               '#title' => 'Allocation Amount',
               '#title_display' => 'invisible',
               '#value' => t("!amount", array('!amount' => money_format('%.2n', $budget->allocation))),
               '#name' => t("allocation[!id]", array('!id' => $budget->id)),
            ),
         ),

      );
   }

   // Create the add category form
   $form['addCategory'] = array(
      '#type' => 'fieldset',
      '#title' => t('Add New Category'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
   );

   $form['addCategory']['category'] = array(
      '#type' => 'textfield',
      '#title' => t('Budget Category'),
      '#description' => t('Name for the budget category'),
      '#size' => 40,
      '#maxLength' => 40,
   );

   $form['addCategory']['addAllocation'] = array(
      '#type' => 'textfield',
      '#title' => t('Allocation Amount'),
      '#description' => t('Allocation amount for this category'),
      '#size' => 40,
      '#maxLength' => 40,
   );

   $form['addCategory']['submit'] = array(
      '#type' => 'submit',
      '#value' => 'Add Category',
      '#validate' => array('add_category_validate'),
      '#submit' => array('add_category_submit'),
   );

   if (!empty($categories))
   {
      // Create the manage budget category form
      $form['budgetCategories'] = array(
         '#type' => 'fieldset',
         '#title' => t("Manage Budget Categories"),
         '#collapsible' => TRUE,
         //'#collapsed' => empty($categories)
         '#collapsed' => TRUE,
      );

      $header = array(
         'category' => t('Budget Category'),
         'allocation' => t('Allocation'),
      );

      // Add the categories
      $form['budgetCategories']['categories'] = array(
         '#type' => 'tableselect',
         '#header' => $header,
         '#options' => $categories,
         '#multiple' => TRUE,
      );

      // Add a way to delete the categories
      $form['budgetCategories']['remove'] = array(
         '#type' => 'submit',
         '#value' => 'Delete Selected',
         '#submit' => array('remove_category_submit'),
      );

      // Add a way to update a category allocation amount
      $form['budgetCategories']['modify'] = array(
         '#type' => 'submit',
         '#value' => 'Update Selected',
         '#validate' => array('modify_category_validate'),
         '#submit' => array('modify_category_submit'),
      );
   }

   return $form;
}


function add_category_validate($form, &$form_state)
{
   $category = $form_state['values']['category'];
   $allocation = $form_state['values']['addAllocation'];
   $allocation = str_replace('$', '', $allocation);

   if (!$category)
   {
      form_set_error('category', 'Please enter a category name');
   }
   else
   {
      // Category name is set. Make sure the same category does not already exist
      $result = db_select('budget', 'b')
         ->fields('b')
         ->condition('category', $category)
         ->execute()
         ->fetchField();

      if (!empty($result))
      {
         form_set_error('category', t("A budget category with the name !name already exists", array('!name' => $category)));
      }
   }

   if (!$allocation)
   {
      form_set_error('allocation', 'Please enter an allocation amount');
   }
   else if (preg_match('/^[+-]?[0-9]{1,3}(?:,?[0-9]{3})*(?:\.[0-9]{2})?$/', $allocation) != 1)
   {
      form_set_error('allocation', 'Please enter a valid allocation amount');
   }
}

function add_category_submit($form, &$form_state)
{
   global $user;
   $category = $form_state['values']['category'];
   drupal_set_message(t("Adding Category !name", array('!name' => $category)));
   $allocation = str_replace('$', '', $form_state['values']['addAllocation']);
   $allocation = preg_replace("/([^0-9\\.])/i", "", $allocation);

   db_insert('budget')
      ->fields(array(
         'uid' => $user->uid,
         'category' => $category,
         'allocation' => $allocation,
      ))
      ->execute();
}

function remove_category_submit($form, &$form_state)
{
   $debug_message = t('');
   $selectedIDs = array_filter($form_state['values']['categories']);

   foreach($selectedIDs as $key => $value)
   {
      if($value)
      {
         // Get the category name from the database with this ID
         $category = db_select('budget', 'b')
            ->fields('b', array('category'))
            ->condition('id', $key)
            ->execute()
            ->fetchField();

         $num_deleted = db_delete('budget')
            ->condition('id', $key)
            ->execute();

         if($num_deleted > 0)
         {
            $debug_message .= "Successfully removed " . $category . "<br/>";
         }
      }
   }

   if(!empty($debug_message))
   {
      drupal_set_message($debug_message, 'status');
   }
}

function modify_category_validate($form, &$form_state)
{
   $selectedIDs = array_filter($form_state['values']['categories']);

   if(!$selectedIDs)
   {
      drupal_set_message("Select a category to update", 'error');
   }

   foreach($selectedIDs as $key => $value)
   {
      if($value)
      {
         if(!$key)
         {
            drupal_set_message("Select a category to update", 'error');
         }
         else
         {
            $amount = str_replace('$', '', $form_state['input']['allocation'][$key]);

            if(!$amount)
            {
               form_set_error('allocation', 'Please enter a valid allocation amount');
            }
            else if (preg_match('/^[+-]?[0-9]{1,3}(?:,?[0-9]{3})*(?:\.[0-9]{2})?$/', $amount) != 1)
            {
               form_set_error('allocation', 'Please enter a valid allocation amount');
            }
         }
      }
   }
}

function modify_category_submit($form, &$form_state)
{
   $debug_message = t('');
   $selectedIDs = array_filter($form_state['values']['categories']);

   foreach($selectedIDs as $key => $value)
   {
      if($value)
      {
         $amount = str_replace('$', '', $form_state['input']['allocation'][$key]);
         $amount = preg_replace("/([^0-9\\.])/i", "", $amount);

         // Update the database with the new allocation amount
         $num_updated = db_update('budget')
            ->fields(array('allocation' => floatval($amount)))
            ->condition('id', $key)
            ->execute();

         // Get the category name from the database with this ID
         $category = db_select('budget', 'b')
            ->fields('b', array('category'))
            ->condition('id', $key)
            ->execute()
            ->fetchField();

         if($num_updated > 0)
         {
            $debug_message .= "Updated " . $category . " to " . $amount . "<br/>";
         }
      }
   }

   if(!empty($debug_message))
   {
      drupal_set_message($debug_message, 'status');
   }
}







/**
 * Creates the form to add a budget category
 */
function budget_income_add_form()
{
   global $user;

   // Use the custom function to retrieve data
   $result = budget_income_contents();

   // Array to contain the list of categories returned from the database
   $categories = array();

   // Iterate over the resultset and format as strings
   foreach ($result as $income)
   {
      $categories[$income->id] = array(
         'category' => $income->category,
      );
   }

   // Create the add category form
   $form['addIncomeCategory'] = array(
      '#type' => 'fieldset',
      '#title' => t('Add New Income Category'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
   );

   $form['addIncomeCategory']['category'] = array(
      '#type' => 'textfield',
      '#title' => t('Income Category'),
      '#description' => t('Name for the income category'),
      '#size' => 40,
      '#maxLength' => 40,
   );

   $form['addIncomeCategory']['submit'] = array(
      '#type' => 'submit',
      '#value' => 'Add Income Category',
      '#validate' => array('add_income_category_validate'),
      '#submit' => array('add_income_category_submit'),
   );

   if (!empty($categories))
   {
      // Create the manage budget category form
      $form['incomeCategories'] = array(
         '#type' => 'fieldset',
         '#title' => t("Manage Income Categories"),
         '#collapsible' => TRUE,
         //'#collapsed' => empty($categories)
         '#collapsed' => TRUE,
      );

      $header = array(
         'category' => t('Income Category'),
      );

      // Add the categories
      $form['incomeCategories']['categories'] = array(
         '#type' => 'tableselect',
         '#header' => $header,
         '#options' => $categories,
         '#multiple' => TRUE,
      );

      // Add a way to delete the categories
      $form['incomeCategories']['remove'] = array(
         '#type' => 'submit',
         '#value' => 'Delete Selected',
         '#submit' => array('remove_income_category_submit'),
      );
   }

   return $form;
}


function add_income_category_validate($form, &$form_state)
{
   $category = $form_state['values']['category'];

   if (!$category)
   {
      form_set_error('category', 'Please enter a category name');
   }
   else
   {
      // Category name is set. Make sure the same category does not already exist
      $result = db_select('budgetIncome', 'b')
         ->fields('b')
         ->condition('category', $category)
         ->execute()
         ->fetchField();

      if (!empty($result))
      {
         form_set_error('category', t("An income category with the name !name already exists", array('!name' => $category)));
      }
   }
}

function add_income_category_submit($form, &$form_state)
{
   global $user;
   $category = $form_state['values']['category'];
   drupal_set_message(t("Adding Income Category !name", array('!name' => $category)));

   db_insert('budgetIncome')
      ->fields(array(
         'uid' => $user->uid,
         'category' => $category,
      ))
      ->execute();
}

function remove_income_category_submit($form, &$form_state)
{
   $debug_message = t('');
   $selectedIDs = array_filter($form_state['values']['categories']);

   foreach($selectedIDs as $key => $value)
   {
      if($value)
      {
         // Get the category name from the database with this ID
         $category = db_select('budgetIncome', 'b')
            ->fields('b', array('category'))
            ->condition('id', $key)
            ->execute()
            ->fetchField();

         $num_deleted = db_delete('budgetIncome')
            ->condition('id', $key)
            ->execute();

         if($num_deleted > 0)
         {
            $debug_message .= "Successfully removed " . $category . "<br/>";
         }
      }
   }

   if(!empty($debug_message))
   {
      drupal_set_message($debug_message, 'status');
   }
}
